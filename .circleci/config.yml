version: 2.1

orbs:
  hmpps: ministryofjustice/hmpps@9

parameters:
  alerts-slack-channel:
    type: string
    default: syscon-alerts-security
  releases-slack-channel:
    type: string
    default: dps-releases
  test-executor-packages:
    type: string
    default: "activities adjudications alerts appointments courtsentencing csip incidents locations prisonperson sentencing visits"
  test-executors-count:
    type: integer
    default: 12

jobs:
  validate:
    executor:
      name: hmpps/java
      tag: "21.0"
    environment:
      # Setting max gradle workers to 1 (which means 1 running concurrently, not max 1!) - because although this doesn't stop the ktlint workers from starting it does seem to prevent the test executor from needing as much memory.
      _JAVA_OPTIONS: -Xmx1g -XX:ParallelGCThreads=2 -XX:ConcGCThreads=2
        -XX:ParallelGCThreads=2
        -Djava.util.concurrent.ForkJoinPool.common.parallelism=2
        -Dorg.gradle.daemon=false -Dorg.gradle.jvmargs=-XX:+UseContainerSupport
        -Dkotlin.compiler.execution.strategy=in-process -Dorg.gradle.workers.max=1

    steps:
      - checkout
      - restore_cache:
          keys:
            - gradle-{{ checksum "build.gradle.kts" }}
            - gradle-
      - run:
          command: ./gradlew check -x test

      - save_cache:
          paths:
            - ~/.gradle
          key: gradle-{{ checksum "build.gradle.kts" }}

  tests:
    parallelism: << pipeline.parameters.test-executors-count >>
    resource_class: large
    executor:
      name: hmpps/java_localstack_postgres
      jdk_tag: "21.0"
      localstack_tag: "3"
      postgres_tag: "16"
      postgres_username: "migration"
      postgres_password: "migration"
    environment:
      # Setting max gradle workers to 1 (which means 1 running concurrently, not max 1!) - because although this doesn't stop the ktlint workers from starting it does seem to prevent the test executor from needing as much memory.
      _JAVA_OPTIONS: -Xmx1g -XX:ParallelGCThreads=2 -XX:ConcGCThreads=2
        -XX:ParallelGCThreads=2
        -Djava.util.concurrent.ForkJoinPool.common.parallelism=2
        -Dorg.gradle.daemon=false -Dorg.gradle.jvmargs=-XX:+UseContainerSupport
        -Dkotlin.compiler.execution.strategy=in-process -Dorg.gradle.workers.max=1

    steps:
      - checkout
      - hmpps/wait_till_ready
      - restore_cache:
          keys:
            - gradle-{{ checksum "build.gradle.kts" }}
            - gradle-
      - run:
          command: |
            cd src/test/kotlin
            
            # Find all packages            
            all_packages=($(find uk/gov/justice/digital/hmpps/prisonerfromnomismigration -mindepth 1 -maxdepth 1 -type d -exec basename {} \;))

            # Get all packages that require a dedicated executor
            dedicated_executor_packages=()
            for i in << pipeline.parameters.test-executor-packages >>; do dedicated_executor_packages+=($i); done

            # Validate parameter test-executors-count (which needs to be a parameter because it's used in the "parallelism" declaration)
            required_executors="${#dedicated_executor_packages[@]}"
            if [[ $CIRCLE_NODE_TOTAL -ne $((required_executors+1)) ]]; then
              echo "The 'test-executors-count' must be 1 more than the number of packages in parameter 'test-executor-packages".
              exit 1
            fi
            
            # Get all other packages that don't require a dedicated executor - these will be run on a single executor
            common_executor_packages=()
            for package in "${all_packages[@]}"; do
              if [[ ! " ${dedicated_executor_packages[@]} " =~ " ${package} " ]]; then
                common_executor_packages+=("$package")
              fi
            done

            # Function to find test classes for a package and write them to file
            find_test_classes() {
              local package=$1
              local output_file=$2
            
              if [ -d "uk/gov/justice/digital/hmpps/prisonerfromnomismigration/$package" ]; then
                local test_files=$(find "uk/gov/justice/digital/hmpps/prisonerfromnomismigration/$package" -name "*.kt" \
                  | xargs -r grep -l -E '@Test|@ParameterizedTest' 2>/dev/null || true)
                echo "Found test_files for package=$package: $test_files"
                
                # Convert test files to class names
                if [ ! -z "$test_files" ]; then
                  echo "$test_files" \
                    | sed 's@/@.@g' \
                    | sed 's/\.kt//g' \
                    >> "$output_file"
                fi
              else
                echo "Directory uk/gov/justice/digital/hmpps/prisonerfromnomismigration/$package does not exist. Check parameter test-executor-packages."
                exit 1
              fi
            }
            
            index_output_file="test_classes$CIRCLE_NODE_INDEX.txt"
            > "$index_output_file"
            
            if [[ "$CIRCLE_NODE_INDEX" -lt "$((CIRCLE_NODE_TOTAL-1))" ]]; then
              # Create a file containing the classes for this dedicated executor package
              echo "Finding test classes for dedicated executor from package=${dedicated_executor_packages[$CIRCLE_NODE_INDEX]}"
              find_test_classes "${dedicated_executor_packages[$CIRCLE_NODE_INDEX]}" "$index_output_file"
            else
              # Create a single file to contain test classes bundled from all other packages
              echo "Finding test classes for common executor from packages=${common_executor_packages[@]}"
              for common_executor_package in "${common_executor_packages[@]}"; do
                find_test_classes "$common_executor_package" "$index_output_file"
              done
            fi
            
            echo "Executor $CIRCLE_NODE_INDEX will run tests for classes: $(cat $index_output_file)"

            # Fail the build if no test files were found - unless we're in the bundled executor (which could potentially have zero tests)
            if [[ "$CIRCLE_NODE_INDEX" -lt "$((CIRCLE_NODE_TOTAL-1))" ]]; then
              [ -s test_classes$CIRCLE_NODE_INDEX.txt ] || circleci-agent step halt
            fi
      - run:
          command: |
            GRADLE_ARGS=$(cat src/test/kotlin/test_classes$CIRCLE_NODE_INDEX.txt \
            | awk '{for (i=1; i<=NF; i++) print "--tests",$i}')
            
            echo "Prepared arguments for Gradle: $GRADLE_ARGS"

            ./gradlew test $GRADLE_ARGS
      - save_cache:
          paths:
            - ~/.gradle
          key: gradle-{{ checksum "build.gradle.kts" }}
      - store_test_results:
          path: build/test-results
      - store_artifacts:
          path: build/reports/tests

workflows:
  version: 2
  build-test-and-deploy:
    jobs:
      - validate:
          filters:
            tags:
              ignore: /.*/
      - tests:
          filters:
            tags:
              ignore: /.*/
      - hmpps/helm_lint:
          name: helm_lint
      - hmpps/build_multiplatform_docker:
          name: build_docker
          filters:
            branches:
              only:
                - main
      - hmpps/deploy_env:
          name: deploy_dev
          env: "dev"
          jira_update: true
          pipeline_id: <<pipeline.id>>
          pipeline_number: <<pipeline.number>>
          context: hmpps-common-vars
          filters:
            branches:
              only:
                - main
          requires:
            - validate
            - tests
            - build_docker
            - helm_lint
      - request-preprod-approval:
          type: approval
          requires:
            - deploy_dev
      - hmpps/deploy_env:
          name: deploy_preprod
          env: "preprod"
          jira_update: true
          jira_env_type: staging
          pipeline_id: <<pipeline.id>>
          pipeline_number: <<pipeline.number>>
          context:
            - hmpps-common-vars
            - hmpps-prisoner-from-nomis-migration-preprod
          requires:
            - request-preprod-approval
      - request-prod-approval:
          type: approval
          requires:
            - deploy_preprod
      - hmpps/deploy_env:
          name: deploy_prod
          env: "prod"
          jira_update: true
          jira_env_type: production
          pipeline_id: <<pipeline.id>>
          pipeline_number: <<pipeline.number>>
          slack_notification: true
          slack_channel_name: << pipeline.parameters.releases-slack-channel >>
          context:
            - hmpps-common-vars
            - hmpps-prisoner-from-nomis-migration-prod
          requires:
            - request-prod-approval

  security:
    triggers:
      - schedule:
          cron: "29 8 * * 1-5"
          filters:
            branches:
              only:
                - main
    jobs:
      - hmpps/gradle_owasp_dependency_check:
          cache_key: "v2_0"
          jdk_tag: "21.0"
          slack_channel: << pipeline.parameters.alerts-slack-channel >>
          context:
            - hmpps-common-vars
      - hmpps/trivy_latest_scan:
          slack_channel: << pipeline.parameters.alerts-slack-channel >>
          context:
            - hmpps-common-vars
      - hmpps/veracode_pipeline_scan:
          jdk_tag: "21.0"
          slack_channel: << pipeline.parameters.alerts-slack-channel >>
          context:
            - veracode-credentials
            - hmpps-common-vars
  security-weekly:
    triggers:
      - schedule:
          cron: "53 8 * * 1"
          filters:
            branches:
              only:
                - main
    jobs:
      - hmpps/veracode_policy_scan:
          jdk_tag: "21.0"
          slack_channel: << pipeline.parameters.alerts-slack-channel >>
          context:
            - veracode-credentials
            - hmpps-common-vars


