version: 2.1
orbs:
  hmpps: ministryofjustice/hmpps@10
parameters:
  alerts-slack-channel:
    type: string
    default: syscon-alerts-security
  test-executor-packages:
    type: string
    default: "activities alerts appointments courtsentencing csip incidents locations sentencing visits personalrelationships casenotes organisations"
  test-executors-count:
    type: integer
    default: 13
jobs:
  compile:
    executor:
      name: hmpps/java
      tag: "21.0"
    steps:
      - checkout
      - restore_cache:
          keys:
            - gradle-{{ checksum "build.gradle.kts" }}
            - gradle-
      - run:
          command: ./gradlew compileKotlin
      - save_cache:
          paths:
            - ~/.gradle
          key: gradle-{{ checksum "build.gradle.kts" }}
  validate:
    executor:
      name: hmpps/java
      tag: "21.0"
    steps:
      - checkout
      - restore_cache:
          keys:
            - gradle-{{ checksum "build.gradle.kts" }}
            - gradle-
      - run:
          command: ./gradlew check -x test
      - save_cache:
          paths:
            - ~/.gradle
          key: gradle-{{ checksum "build.gradle.kts" }}
  tests:
    parallelism: << pipeline.parameters.test-executors-count >>
    executor:
      name: hmpps/java_localstack_postgres
      jdk_tag: "21.0"
      localstack_tag: "3"
      postgres_tag: "17"
      postgres_username: "migration"
      postgres_password: "migration"
    environment:
      # Setting max gradle workers to 1 (which means 1 running concurrently, not max 1!) - because although this doesn't stop the ktlint workers from starting it does seem to prevent the test executor from needing as much memory.
      _JAVA_OPTIONS: -Xmx768m -XX:ParallelGCThreads=2 -XX:ConcGCThreads=2 -XX:ParallelGCThreads=2 -Djava.util.concurrent.ForkJoinPool.common.parallelism=2 -Dorg.gradle.daemon=false -Dorg.gradle.jvmargs=-XX:+UseContainerSupport -Dkotlin.compiler.execution.strategy=in-process -Dorg.gradle.workers.max=1
    steps:
      - checkout
      - hmpps/wait_till_ready
      - restore_cache:
          keys:
            - gradle-{{ checksum "build.gradle.kts" }}
            - gradle-
      - run:
          command: ./setup-test-executor.sh "<< pipeline.parameters.test-executor-packages >>"
      - run:
          command: |
            GRADLE_ARGS=$(cat src/test/kotlin/test_classes$CIRCLE_NODE_INDEX.txt \
            | awk '{for (i=1; i<=NF; i++) print "--tests",$i}')

            echo "Prepared arguments for Gradle: $GRADLE_ARGS"

            ./gradlew test $GRADLE_ARGS
      - save_cache:
          paths:
            - ~/.gradle
          key: gradle-{{ checksum "build.gradle.kts" }}
      - store_test_results:
          path: build/test-results
      - store_artifacts:
          path: build/reports/tests
workflows:
  version: 2
  build-test-and-deploy:
    jobs:
      - compile:
          filters:
            tags:
              ignore: /.*/
      - validate:
          filters:
            tags:
              ignore: /.*/
      - tests:
          filters:
            tags:
              ignore: /.*/
          requires:
            - compile
      - hmpps/helm_lint:
          name: helm_lint
      - hmpps/build_multiplatform_docker:
          name: build_docker
          filters:
            branches:
              only:
                - main
      - hmpps/deploy_env:
          name: deploy_dev
          env: "dev"
          jira_update: true
          pipeline_id: <<pipeline.id>>
          pipeline_number: <<pipeline.number>>
          context: hmpps-common-vars
          filters:
            branches:
              only:
                - main
          requires:
            - validate
            - tests
            - build_docker
            - helm_lint
      - request-preprod-approval:
          type: approval
          requires:
            - deploy_dev
      - hmpps/deploy_env:
          name: deploy_preprod
          env: "preprod"
          jira_update: true
          jira_env_type: staging
          pipeline_id: <<pipeline.id>>
          pipeline_number: <<pipeline.number>>
          context:
            - hmpps-common-vars
            - hmpps-prisoner-from-nomis-migration-preprod
          requires:
            - request-preprod-approval
      - request-prod-approval:
          type: approval
          requires:
            - deploy_preprod
      - hmpps/deploy_env:
          name: deploy_prod
          env: "prod"
          jira_update: true
          jira_env_type: production
          pipeline_id: <<pipeline.id>>
          pipeline_number: <<pipeline.number>>
          slack_notification: true
          context:
            - hmpps-common-vars
            - hmpps-prisoner-from-nomis-migration-prod
          requires:
            - request-prod-approval
