version: 2.1
orbs:
  hmpps: ministryofjustice/hmpps@10
parameters:
  alerts-slack-channel:
    type: string
    default: syscon-alerts-security
  test-executor-packages:
    type: string
    default: "activities adjudications alerts appointments courtsentencing csip incidents locations prisonperson sentencing visits"
  test-executors-count:
    type: integer
    default: 12
jobs:
  validate:
    executor:
      name: hmpps/java
      tag: "21.0"
    steps:
      - checkout
      - restore_cache:
          keys:
            - gradle-{{ checksum "build.gradle.kts" }}
            - gradle-
      - run:
          command: ./gradlew check -x test
      - save_cache:
          paths:
            - ~/.gradle
          key: gradle-{{ checksum "build.gradle.kts" }}
  tests:
    parallelism: << pipeline.parameters.test-executors-count >>
    executor:
      name: hmpps/java_localstack_postgres
      jdk_tag: "21.0"
      localstack_tag: "3"
      postgres_tag: "16"
      postgres_username: "migration"
      postgres_password: "migration"
    environment:
      # Setting max gradle workers to 1 (which means 1 running concurrently, not max 1!) - because although this doesn't stop the ktlint workers from starting it does seem to prevent the test executor from needing as much memory.
      _JAVA_OPTIONS: -Xmx768m -XX:ParallelGCThreads=2 -XX:ConcGCThreads=2 -XX:ParallelGCThreads=2 -Djava.util.concurrent.ForkJoinPool.common.parallelism=2 -Dorg.gradle.daemon=false -Dorg.gradle.jvmargs=-XX:+UseContainerSupport -Dkotlin.compiler.execution.strategy=in-process -Dorg.gradle.workers.max=1
    steps:
      - checkout
      - hmpps/wait_till_ready
      - restore_cache:
          keys:
            - gradle-{{ checksum "build.gradle.kts" }}
            - gradle-
      - run:
          command: "cd src/test/kotlin\n\n# Find all packages            \nall_packages=($(find uk/gov/justice/digital/hmpps/prisonerfromnomismigration -mindepth 1 -maxdepth 1 -type d -exec basename {} \\;))\n\n# Get all packages that require a dedicated executor\ndedicated_executor_packages=()\nfor i in << pipeline.parameters.test-executor-packages >>; do dedicated_executor_packages+=($i); done\n\n# Validate parameter test-executors-count (which needs to be a parameter because it's used in the \"parallelism\" declaration)\nrequired_executors=\"${#dedicated_executor_packages[@]}\"\nif [[ $CIRCLE_NODE_TOTAL -ne $((required_executors+1)) ]]; then\n  echo \"The 'test-executors-count' must be 1 more than the number of packages in parameter 'test-executor-packages\".\n  exit 1\nfi\n\n# Get all other packages that don't require a dedicated executor - these will be run on a single executor\ncommon_executor_packages=()\nfor package in \"${all_packages[@]}\"; do\n  if [[ ! \" ${dedicated_executor_packages[@]} \" =~ \" ${package} \" ]]; then\n    common_executor_packages+=(\"$package\")\n  fi\ndone\n\n# Function to find test classes for a package and write them to file\nfind_test_classes() {\n  local package=$1\n  local output_file=$2\n\n  if [ -d \"uk/gov/justice/digital/hmpps/prisonerfromnomismigration/$package\" ]; then\n    local test_files=$(find \"uk/gov/justice/digital/hmpps/prisonerfromnomismigration/$package\" -name \"*.kt\" \\\n      | xargs -r grep -l -E '@Test|@ParameterizedTest' 2>/dev/null || true)\n    echo \"Found test_files for package=$package: $test_files\"\n    \n    # Convert test files to class names\n    if [ ! -z \"$test_files\" ]; then\n      echo \"$test_files\" \\\n        | sed 's@/@.@g' \\\n        | sed 's/\\.kt//g' \\\n        >> \"$output_file\"\n    fi\n  else\n    echo \"Directory uk/gov/justice/digital/hmpps/prisonerfromnomismigration/$package does not exist. Check parameter test-executor-packages.\"\n    exit 1\n  fi\n}\n\nindex_output_file=\"test_classes$CIRCLE_NODE_INDEX.txt\"\n> \"$index_output_file\"\n\nif [[ \"$CIRCLE_NODE_INDEX\" -lt \"$((CIRCLE_NODE_TOTAL-1))\" ]]; then\n  # Create a file containing the classes for this dedicated executor package\n  echo \"Finding test classes for dedicated executor from package=${dedicated_executor_packages[$CIRCLE_NODE_INDEX]}\"\n  find_test_classes \"${dedicated_executor_packages[$CIRCLE_NODE_INDEX]}\" \"$index_output_file\"\nelse\n  # Create a single file to contain test classes bundled from all other packages\n  echo \"Finding test classes for common executor from packages=${common_executor_packages[@]}\"\n  for common_executor_package in \"${common_executor_packages[@]}\"; do\n    find_test_classes \"$common_executor_package\" \"$index_output_file\"\n  done\nfi\n\necho \"Executor $CIRCLE_NODE_INDEX will run tests for classes: $(cat $index_output_file)\"\n\n# Fail the build if no test files were found - unless we're in the bundled executor (which could potentially have zero tests)\nif [[ \"$CIRCLE_NODE_INDEX\" -lt \"$((CIRCLE_NODE_TOTAL-1))\" ]]; then\n  [ -s test_classes$CIRCLE_NODE_INDEX.txt ] || circleci-agent step halt\nfi\n"
      - run:
          command: |
            GRADLE_ARGS=$(cat src/test/kotlin/test_classes$CIRCLE_NODE_INDEX.txt \
            | awk '{for (i=1; i<=NF; i++) print "--tests",$i}')

            echo "Prepared arguments for Gradle: $GRADLE_ARGS"

            ./gradlew test $GRADLE_ARGS
      - save_cache:
          paths:
            - ~/.gradle
          key: gradle-{{ checksum "build.gradle.kts" }}
      - store_test_results:
          path: build/test-results
      - store_artifacts:
          path: build/reports/tests
workflows:
  version: 2
  build-test-and-deploy:
    jobs:
      - validate:
          filters:
            tags:
              ignore: /.*/
      - tests:
          filters:
            tags:
              ignore: /.*/
      - hmpps/helm_lint:
          name: helm_lint
      - hmpps/build_multiplatform_docker:
          name: build_docker
          filters:
            branches:
              only:
                - main
      - hmpps/deploy_env:
          name: deploy_dev
          env: "dev"
          jira_update: true
          pipeline_id: <<pipeline.id>>
          pipeline_number: <<pipeline.number>>
          context: hmpps-common-vars
          filters:
            branches:
              only:
                - main
          requires:
            - validate
            - tests
            - build_docker
            - helm_lint
      - request-preprod-approval:
          type: approval
          requires:
            - deploy_dev
      - hmpps/deploy_env:
          name: deploy_preprod
          env: "preprod"
          jira_update: true
          jira_env_type: staging
          pipeline_id: <<pipeline.id>>
          pipeline_number: <<pipeline.number>>
          context:
            - hmpps-common-vars
            - hmpps-prisoner-from-nomis-migration-preprod
          requires:
            - request-preprod-approval
      - request-prod-approval:
          type: approval
          requires:
            - deploy_preprod
      - hmpps/deploy_env:
          name: deploy_prod
          env: "prod"
          jira_update: true
          jira_env_type: production
          pipeline_id: <<pipeline.id>>
          pipeline_number: <<pipeline.number>>
          slack_notification: true
          context:
            - hmpps-common-vars
            - hmpps-prisoner-from-nomis-migration-prod
          requires:
            - request-prod-approval
