{
  "openapi": "3.0.1",
  "info": {
    "title": "Prison Person API",
    "description": "API for access to Prison Person Data (data about a person that is specific to their time in prison)",
    "contact": {
      "name": "HMPPS Digital Studio",
      "email": "feedback@digital.justice.gov.uk"
    },
    "version": "2024-12-03.1926.b6d7798"
  },
  "servers": [
    {
      "url": "/",
      "description": "Current url"
    }
  ],
  "security": [
    {
      "bearer-jwt": [
        "read",
        "write"
      ]
    },
    {
      "hmpps-auth": []
    }
  ],
  "tags": [
    {
      "name": "Field History",
      "description": "The history of changes to fields linked to a prisoner, such as height, weight, hair, facial hair, face shape, build, eye colour and shoe size."
    },
    {
      "name": "Health",
      "description": "The health information for a prisoner"
    },
    {
      "name": "Physical Attributes",
      "description": "The physical attributes of a prisoner - height, weight, hair, facial hair, face shape, build, eye colour and shoe size."
    },
    {
      "name": "Reference Data Domains",
      "description": "Reference Data Domains for Prison Person data"
    },
    {
      "name": "Sync with NOMIS",
      "description": "Endpoints to keep the Prison Person database in sync with changes in the NOMIS database"
    },
    {
      "name": "Prison Person Data",
      "description": "Data about a person that is specific to their time in prison"
    },
    {
      "name": "Prison Person Photographs",
      "description": "The photographs linked to a prisoner"
    },
    {
      "name": "Migration from NOMIS",
      "description": "Endpoints to facilitate migration of data from NOMIS to the Prison Person database"
    },
    {
      "name": "Reference Data Codes",
      "description": "Reference Data Codes for Prison Person data"
    },
    {
      "name": "Distinguishing marks",
      "description": "Distinguishing marks linked to a prisoner"
    }
  ],
  "paths": {
    "/sync/prisoners/{prisonerNumber}/profile-details-physical-attributes": {
      "put": {
        "tags": [
          "Profile Details Physical Attributes",
          "Sync with NOMIS"
        ],
        "summary": "SYNC endpoint to sync changes to profile details physical attributes made in NOMIS",
        "description": "This endpoint <b>SHOULD ONLY BE USED IN ORDER TO SYNC CHANGES MADE IN NOMIS.</b> There is a separate endpoint for normal editing of the Physical Attributes.<br/><br/>Requires role `ROLE_PRISON_PERSON_API__PROFILE_DETAILS_PHYSICAL_ATTRIBUTES_SYNC__RW`<br/><br/>Edits can be made to profile details physical attributes in NOMIS to both the current booking and to old bookings. This sync API can handle both by accepting the `appliesFrom` and `appliesTo` timestamps - `appliesFrom` should be equal to the point in time that the edit happened, and `appliesTo` should be null.  For edits to historical bookings `appliesFrom` should be equal to the booking start date and and `appliesTo` should be equal to the booking end date. The `lastModifiedAt` date should always be the point in time that the user made the edit.",
        "operationId": "syncPhysicalAttributes",
        "parameters": [
          {
            "name": "prisonerNumber",
            "in": "path",
            "description": "The prisoner number",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The prisoner number",
              "example": "A1234AA"
            },
            "example": "A1234AA"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProfileDetailsPhysicalAttributesSyncRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Returns prisoner's physical attributes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProfileDetailsPhysicalAttributesSyncResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Missing required role. Requires ROLE_PRISON_PERSON_API__PROFILE_DETAILS_PHYSICAL_ATTRIBUTES_SYNC__RW",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProfileDetailsPhysicalAttributesSyncResponse"
                }
              }
            }
          }
        }
      }
    },
    "/sync/prisoners/{prisonerNumber}/physical-attributes": {
      "get": {
        "tags": [
          "Physical Attributes",
          "Sync with NOMIS"
        ],
        "summary": "GET endpoint for the physical attributes NOMIS sync",
        "description": "This endpoint <b>SHOULD ONLY BE USED TO GET PHYSICAL ATTRIBUTES AS PART OF THE NOMIS SYNC.</b> There is a separate endpoint for normal GET of the Physical Attributes.<br/><br/>Requires role `ROLE_PRISON_PERSON_API__PHYSICAL_ATTRIBUTES_SYNC__RW`",
        "operationId": "getPhysicalAttributes",
        "parameters": [
          {
            "name": "prisonerNumber",
            "in": "path",
            "description": "The prisoner number",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The prisoner number",
              "example": "A1234AA"
            },
            "example": "A1234AA"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the prisoner's physical attributes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PhysicalAttributesSyncDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Missing required role. Requires ROLE_PRISON_PERSON_API__PHYSICAL_ATTRIBUTES_SYNC__RW",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Data not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Physical Attributes",
          "Sync with NOMIS"
        ],
        "summary": "SYNC endpoint to sync changes to physical attributes made in NOMIS",
        "description": "This endpoint <b>SHOULD ONLY BE USED IN ORDER TO SYNC CHANGES MADE IN NOMIS.</b> There is a separate endpoint for normal editing of the Physical Attributes.<br/><br/>Requires role `ROLE_PRISON_PERSON_API__PHYSICAL_ATTRIBUTES_SYNC__RW`<br/><br/>Edits can be made to physical attributes in NOMIS to both the current booking and to old bookings. This sync API can handle both by accepting the `appliesFrom` and `appliesTo` timestamps - `appliesFrom` should be equal to the booking start date and and `appliesTo` should be equal to the booking end date. The `createdAt` date should always be the point in time that the user made the edit.",
        "operationId": "syncPhysicalAttributes_1",
        "parameters": [
          {
            "name": "prisonerNumber",
            "in": "path",
            "description": "The prisoner number",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The prisoner number",
              "example": "A1234AA"
            },
            "example": "A1234AA"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PhysicalAttributesSyncRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Returns prisoner's physical attributes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PhysicalAttributesSyncResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Missing required role. Requires ROLE_PRISON_PERSON_API__PHYSICAL_ATTRIBUTES_SYNC__RW",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PhysicalAttributesSyncResponse"
                }
              }
            }
          }
        }
      }
    },
    "/sync/prisoners/{prisonerNumber}/distinguishing-marks/{distinguishingMarkId}": {
      "put": {
        "tags": [
          "Distinguishing marks",
          "Sync with NOMIS"
        ],
        "summary": "SYNC endpoint to sync changes to distinguishing marks made in NOMIS",
        "description": "This endpoint <b>SHOULD ONLY BE USED IN ORDER TO SYNC CHANGES MADE IN NOMIS.</b> There is a separate endpoint for normal editing of the distinguishing marks.<br/><br/>Requires role `ROLE_PRISON_PERSON_API__DISTINGUISHING_MARKS_SYNC__RW`<br/><br/>Edits can be made to distinguishing marks in NOMIS to both the current booking and to old bookings. This sync API can handle both by accepting the `appliesFrom` and `appliesTo` timestamps - `appliesFrom` should be equal to the booking start date and and `appliesTo` should be equal to the booking end date. The `createdAt` date should always be the point in time that the user made the edit.",
        "operationId": "syncUpdateDistinguishingMark",
        "parameters": [
          {
            "name": "prisonerNumber",
            "in": "path",
            "description": "The prisoner number",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "A1234AA"
          },
          {
            "name": "distinguishingMarkId",
            "in": "path",
            "description": "The UUID of the distinguishing mark to delete",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "22198ef9-445d-449a-b016-0521ebfb5c2d"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DistinguishingMarkUpdateSyncRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Returns ID of the edited distinguishing mark",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DistinguishingMarkSyncResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Missing required role. Requires ROLE_PRISON_PERSON_API__DISTINGUISHING_MARKS_SYNC__RW",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Distinguishing marks",
          "Sync with NOMIS"
        ],
        "summary": "SYNC endpoint to sync distinguishing mark deletions made in NOMIS",
        "description": "This endpoint <b>SHOULD ONLY BE USED IN ORDER TO SYNC CHANGES MADE IN NOMIS.</b> There is a separate endpoint for normal editing of the distinguishing marks.<br/><br/>Requires role `ROLE_PRISON_PERSON_API__DISTINGUISHING_MARKS_SYNC__RW`<br/><br/>Edits can be made to distinguishing marks in NOMIS to both the current booking and to old bookings. This sync API can handle both by accepting the `appliesFrom` and `appliesTo` timestamps - `appliesFrom` should be equal to the booking start date and and `appliesTo` should be equal to the booking end date. The `createdAt` date should always be the point in time that the user made the edit.",
        "operationId": "syncDeleteDistinguishingMark",
        "parameters": [
          {
            "name": "prisonerNumber",
            "in": "path",
            "description": "The prisoner number",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "A1234AA"
          },
          {
            "name": "distinguishingMarkId",
            "in": "path",
            "description": "The UUID of the distinguishing mark to delete",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "22198ef9-445d-449a-b016-0521ebfb5c2d"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns ID of the deleted distinguishing mark",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DistinguishingMarkSyncResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Missing required role. Requires ROLE_PRISON_PERSON_API__DISTINGUISHING_MARKS_SYNC__RW",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/sync/prisoners/{prisonerNumber}/distinguishing-marks/{distinguishingMarkId}/images/{imageId}": {
      "put": {
        "tags": [
          "Distinguishing marks",
          "Sync with NOMIS"
        ],
        "summary": "SYNC endpoint to sync distinguishing mark image edits made in NOMIS",
        "description": "This endpoint <b>SHOULD ONLY BE USED IN ORDER TO SYNC CHANGES MADE IN NOMIS.</b> There is a separate endpoint for normal editing of the distinguishing mark images.<br/><br/>Requires role `ROLE_PRISON_PERSON_API__DISTINGUISHING_MARKS_SYNC__RW`<br/><br/>Distinguishing mark images can be edited in NOMIS on both the current booking and to old bookings. This sync API can handle both by accepting the `appliesFrom` and `appliesTo` timestamps - `appliesFrom` should be equal to the booking start date and and `appliesTo` should be equal to the booking end date. The `createdAt` date should always be the point in time that the user made the edit.",
        "operationId": "syncUpdateDistinguishingMarkImage",
        "parameters": [
          {
            "name": "prisonerNumber",
            "in": "path",
            "description": "The prisoner number",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "A1234AA"
          },
          {
            "name": "distinguishingMarkId",
            "in": "path",
            "description": "The ID of the distinguishing mark",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "3b47dc4c-5d61-434e-ae7c-29e10718e780"
          },
          {
            "name": "imageId",
            "in": "path",
            "description": "The ID of the image being updated",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "3b47dc4c-5d61-434e-ae7c-29e10718e780"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DistinguishingMarkImageUpdateSyncRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Returns UUID of updated distinguishing mark image",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DistinguishingMarkImageSyncResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Missing required role. Requires ROLE_PRISON_PERSON_API__DISTINGUISHING_MARKS_SYNC__RW",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Distinguishing marks",
          "Sync with NOMIS"
        ],
        "summary": "SYNC endpoint to sync distinguishing mark image deletions made in NOMIS",
        "description": "This endpoint <b>SHOULD ONLY BE USED IN ORDER TO SYNC CHANGES MADE IN NOMIS.</b> There is a separate endpoint for normal deletion of the distinguishing mark images.<br/><br/>Requires role `ROLE_PRISON_PERSON_API__DISTINGUISHING_MARKS_SYNC__RW`<br/><br/>Distinguishing mark images can be deleted in NOMIS on both the current booking and to old bookings. This sync API can handle both by accepting the `appliesFrom` and `appliesTo` timestamps - `appliesFrom` should be equal to the booking start date and and `appliesTo` should be equal to the booking end date. The `createdAt` date should always be the point in time that the user made the edit.",
        "operationId": "syncDeleteDistinguishingMarkImage",
        "parameters": [
          {
            "name": "prisonerNumber",
            "in": "path",
            "description": "The prisoner number",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "A1234AA"
          },
          {
            "name": "distinguishingMarkId",
            "in": "path",
            "description": "The ID of the distinguishing mark",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "3b47dc4c-5d61-434e-ae7c-29e10718e780"
          },
          {
            "name": "imageId",
            "in": "path",
            "description": "The ID of the image being updated",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "3b47dc4c-5d61-434e-ae7c-29e10718e780"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns UUID of created distinguishing mark image",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DistinguishingMarkImageSyncResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Missing required role. Requires ROLE_PRISON_PERSON_API__DISTINGUISHING_MARKS_SYNC__RW",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/queue-admin/retry-dlq/{dlqName}": {
      "put": {
        "tags": [
          "hmpps-queue-resource"
        ],
        "operationId": "retryDlq",
        "parameters": [
          {
            "name": "dlqName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/RetryDlqResult"
                }
              }
            }
          }
        }
      }
    },
    "/queue-admin/retry-all-dlqs": {
      "put": {
        "tags": [
          "hmpps-queue-resource"
        ],
        "operationId": "retryAllDlqs",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RetryDlqResult"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/queue-admin/purge-queue/{queueName}": {
      "put": {
        "tags": [
          "hmpps-queue-resource"
        ],
        "operationId": "purgeQueue",
        "parameters": [
          {
            "name": "queueName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PurgeQueueResult"
                }
              }
            }
          }
        }
      }
    },
    "/migration/prisoners/{prisonerNumber}/profile-details-physical-attributes": {
      "put": {
        "tags": [
          "Profile Details Physical Attributes",
          "Migration from NOMIS"
        ],
        "summary": "MIGRATION endpoint to sync changes to profile details physical attributes made in NOMIS",
        "description": "This endpoint <b>SHOULD ONLY BE USED IN ORDER TO MIGRATE DATA.</b><br/><br/>Requires role `ROLE_PRISON_PERSON_API__PROFILE_DETAILS_PHYSICAL_ATTRIBUTES_MIGRATION__RW` user made the edit.",
        "operationId": "migratePersonalDetailsPhysicalAttributes",
        "parameters": [
          {
            "name": "prisonerNumber",
            "in": "path",
            "description": "The prisoner number",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The prisoner number",
              "example": "A1234AA"
            },
            "example": "A1234AA"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "uniqueItems": true,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProfileDetailsPhysicalAttributesMigrationRequest"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Returns a list of IDS of field history records created during the migration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProfileDetailsPhysicalAttributesMigrationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Missing required role. Requires ROLE_PRISON_PERSON_API__PROFILE_DETAILS_PHYSICAL_ATTRIBUTES_MIGRATION__RW",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProfileDetailsPhysicalAttributesMigrationResponse"
                }
              }
            }
          }
        }
      }
    },
    "/migration/prisoners/{prisonerNumber}/physical-attributes": {
      "put": {
        "tags": [
          "Physical Attributes",
          "Migration from NOMIS"
        ],
        "summary": "MIGRATION endpoint to sync changes to physical attributes made in NOMIS",
        "description": "This endpoint <b>SHOULD ONLY BE USED IN ORDER TO MIGRATE DATA.</b><br/><br/>Requires role `ROLE_PRISON_PERSON_API__PHYSICAL_ATTRIBUTES_MIGRATION__RW` user made the edit.",
        "operationId": "migratePhysicalAttributes",
        "parameters": [
          {
            "name": "prisonerNumber",
            "in": "path",
            "description": "The prisoner number",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The prisoner number",
              "example": "A1234AA"
            },
            "example": "A1234AA"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "uniqueItems": true,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PhysicalAttributesMigrationRequest"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Returns prisoner's physical attributes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PhysicalAttributesMigrationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Missing required role. Requires ROLE_PRISON_PERSON_API__PHYSICAL_ATTRIBUTES_MIGRATION__RW",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PhysicalAttributesMigrationResponse"
                }
              }
            }
          }
        }
      }
    },
    "/sync/prisoners/{prisonerNumber}/distinguishing-marks": {
      "post": {
        "tags": [
          "Distinguishing marks",
          "Sync with NOMIS"
        ],
        "summary": "SYNC endpoint to sync new distinguishing marks made in NOMIS",
        "description": "This endpoint <b>SHOULD ONLY BE USED IN ORDER TO SYNC CHANGES MADE IN NOMIS.</b> There is a separate endpoint for normal creation of the distinguishing marks.<br/><br/>Requires role `ROLE_PRISON_PERSON_API__DISTINGUISHING_MARKS_SYNC__RW`<br/><br/>Distinguishing marks can be added to both current and prior bookings. This sync API can handle both by accepting the `appliesFrom` and `appliesTo` timestamps - `appliesFrom` should be equal to the booking start date and and `appliesTo` should be equal to the booking end date. The `createdAt` date should always be the point in time that the user made the edit.",
        "operationId": "createNewDistinguishingMark",
        "parameters": [
          {
            "name": "prisonerNumber",
            "in": "path",
            "description": "The prisoner number",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "A1234AA"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DistinguishingMarkCreationSyncRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Returns ID of created distinguishing mark",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DistinguishingMarkSyncResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Missing required role. Requires ROLE_PRISON_PERSON_API__DISTINGUISHING_MARKS_SYNC__RW",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/sync/prisoners/{prisonerNumber}/distinguishing-marks/{distinguishingMarkId}/images": {
      "post": {
        "tags": [
          "Distinguishing marks",
          "Sync with NOMIS"
        ],
        "summary": "SYNC endpoint to sync distinguishing mark image creations made in NOMIS",
        "description": "This endpoint <b>SHOULD ONLY BE USED IN ORDER TO SYNC CHANGES MADE IN NOMIS.</b> There is a separate endpoint for normal creation of the distinguishing mark images.<br/><br/>Requires role `ROLE_PRISON_PERSON_API__DISTINGUISHING_MARKS_SYNC__RW`<br/><br/>Images can be added to distinguishing marks in NOMIS to both the current booking and to old bookings. This sync API can handle both by accepting the `appliesFrom` and `appliesTo` timestamps - `appliesFrom` should be equal to the booking start date and and `appliesTo` should be equal to the booking end date. The `createdAt` date should always be the point in time that the user made the edit.",
        "operationId": "syncCreateDistinguishingMarkImage",
        "parameters": [
          {
            "name": "prisonerNumber",
            "in": "path",
            "description": "The prisoner number",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "A1234AA"
          },
          {
            "name": "distinguishingMarkId",
            "in": "path",
            "description": "The UUID of the distinguishing mark to add the image to",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "22198ef9-445d-449a-b016-0521ebfb5c2d"
          },
          {
            "name": "distinguishingMarkImageCreateSyncRequest",
            "in": "query",
            "description": "The distinguishing mark image request",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/DistinguishingMarkImageCreateSyncRequest"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "file"
                ],
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "description": "File part of the multipart request",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns UUID of created distinguishing mark image",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DistinguishingMarkImageSyncResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Missing required role. Requires ROLE_PRISON_PERSON_API__DISTINGUISHING_MARKS_SYNC__RW",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DistinguishingMarkImageSyncResponse"
                }
              }
            }
          }
        }
      }
    },
    "/photographs/prisoner-profile": {
      "post": {
        "tags": [
          "Prison Person Photographs"
        ],
        "summary": "Post a profile picture for a prisoner",
        "description": "description = \"Stores a profile picture supplied on the file attribute of a multipart/form-date submission  \nreturns the meta data for the stored document\"\nRequires role `ROLE_PRISON_PERSON_API__PRISON_PERSON_DATA__RO`",
        "operationId": "putPrisonerProfilePicture",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "file",
                  "prisonerNumber"
                ],
                "type": "object",
                "properties": {
                  "prisonerNumber": {
                    "type": "string",
                    "description": "The prisoner number"
                  },
                  "file": {
                    "type": "string",
                    "description": "File part of the multipart request",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns uploaded photograph document data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Missing required role. Requires ROLE_PRISON_PERSON_API__PRISON_PERSON_DATA__RO",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Data not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/distinguishing-marks/mark": {
      "post": {
        "tags": [
          "Distinguishing marks"
        ],
        "summary": "Post an distinguishing mark",
        "description": "description = \"Stores a new distinguishing mark entry in the database. Optionally stores an image file supplied on the file attribute of a multipart/form-date submission  \nreturns the distinguishing mark detail\"\nRequires role `ROLE_PRISON_PERSON_API__PRISON_PERSON_DATA__RW`",
        "operationId": "putDistinguishingMark",
        "parameters": [
          {
            "name": "distinguishingMarkRequest",
            "in": "query",
            "description": "The distinguishing mark request",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/DistinguishingMarkRequest"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "file"
                ],
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "description": "File part of the multipart request",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns uploaded photograph document data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DistinguishingMarkDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Missing required role. Requires ROLE_PRISON_PERSON_API__PRISON_PERSON_DATA__RW",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Data not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/distinguishing-marks/mark/{uuid}/photo": {
      "post": {
        "tags": [
          "Distinguishing marks"
        ],
        "summary": "Add a new photo for the distinguishing mark",
        "description": "Stores a new distinguishing mark photo and sets it to the current photo for the distinguishing mark.The image file supplied on the file attribute of a multipart/form-date submission.  \nReturns the distinguishing mark detail\nRequires role `ROLE_PRISON_PERSON_API__PRISON_PERSON_DATA__RW`",
        "operationId": "updateDistinguishingMarkPhoto",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "description": "The UUID of the mark",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The UUID of the mark",
              "example": "3946f7d9-25d0-449f-bf17-1ade41559391"
            },
            "example": "3946f7d9-25d0-449f-bf17-1ade41559391"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "file"
                ],
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "description": "File part of the multipart request",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns uploaded photograph document data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DistinguishingMarkDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Missing required role. Requires ROLE_PRISON_PERSON_API__PRISON_PERSON_DATA__RW",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Data not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisoners/{prisonerNumber}/physical-attributes": {
      "get": {
        "tags": [
          "Physical Attributes"
        ],
        "description": "Requires role `ROLE_PRISON_PERSON_API__PRISON_PERSON_DATA__RO`",
        "operationId": "getPhysicalAttributes_1",
        "parameters": [
          {
            "name": "prisonerNumber",
            "in": "path",
            "description": "The prisoner number",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The prisoner number",
              "example": "A1234AA"
            },
            "example": "A1234AA"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the prisoner's physical attributes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PhysicalAttributesDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Missing required role. Requires ROLE_PRISON_PERSON_API__PRISON_PERSON_DATA__RO",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Data not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Physical Attributes"
        ],
        "summary": "Updates the physical attributes (height and weight) for a prisoner",
        "description": "Requires role `ROLE_PRISON_PERSON_API__PHYSICAL_ATTRIBUTES__RW`",
        "operationId": "setPhysicalAttributes",
        "parameters": [
          {
            "name": "prisonerNumber",
            "in": "path",
            "description": "The prisoner number",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The prisoner number",
              "example": "A1234AA"
            },
            "example": "A1234AA"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PhysicalAttributesUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Returns prisoner's physical attributes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PhysicalAttributesDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Missing required role. Requires ROLE_PRISON_PERSON_API__PHYSICAL_ATTRIBUTES__RW",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PhysicalAttributesDto"
                }
              }
            }
          }
        }
      }
    },
    "/prisoners/{prisonerNumber}/health": {
      "patch": {
        "tags": [
          "Health"
        ],
        "summary": "Updates the health information for a prisoner",
        "description": "Requires role `ROLE_PRISON_PERSON_API__HEALTH__RW`",
        "operationId": "createOrUpdateHealth",
        "parameters": [
          {
            "name": "prisonerNumber",
            "in": "path",
            "description": "The prisoner number",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The prisoner number",
              "example": "A1234AA"
            },
            "example": "A1234AA"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PrisonerHealthUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Returns prisoner's health information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HealthDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Missing required role. Requires ROLE_PRISON_PERSON_API__HEALTH__RW",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HealthDto"
                }
              }
            }
          }
        }
      }
    },
    "/distinguishing-marks/mark/{uuid}": {
      "get": {
        "tags": [
          "Distinguishing marks"
        ],
        "summary": "Get distinguishing mark by id",
        "description": "description = \"Returns the distinguishing mark requested.Images associated with the distinguishing mark must be downloaded separatelyRequires role `ROLE_PRISON_PERSON_API__PRISON_PERSON_DATA__RW`",
        "operationId": "getDistinguishingMarkById",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "description": "The uuid of the distinguishing mark",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns distinguishing marks for the prisoner",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DistinguishingMarkDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Missing required role. Requires ROLE_PRISON_PERSON_API__PRISON_PERSON_DATA__RW",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Data not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Distinguishing marks"
        ],
        "summary": "Updates the distinguishing mark",
        "description": "Requires role `ROLE_PRISON_PERSON_API__PRISON_PERSON_DATA__RW`",
        "operationId": "updateDistinguishingMark",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "description": "The UUID of the mark",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The UUID of the mark",
              "example": "3946f7d9-25d0-449f-bf17-1ade41559391"
            },
            "example": "3946f7d9-25d0-449f-bf17-1ade41559391"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DistinguishingMarkUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Returns prisoner's distinguishing mark",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/DistinguishingMarkDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Missing required role. Requires ROLE_PRISON_PERSON_API__PRISON_PERSON_DATA__RW",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/reference-data/domains": {
      "get": {
        "tags": [
          "Reference Data Domains"
        ],
        "summary": "Get all reference data domains",
        "description": "Returns the list of reference data domains. By default this endpoint only returns active reference data domains. The `includeInactive` parameter can be used to return all reference data domains. Requires role `ROLE_PRISON_PERSON_API__REFERENCE_DATA__RO`",
        "operationId": "getReferenceDataDomains",
        "parameters": [
          {
            "name": "includeInactive",
            "in": "query",
            "description": "Include inactive reference data domains. Defaults to false.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "includeSubDomains",
            "in": "query",
            "description": "Include sub-domains at the top level. Defaults to false",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Reference data domains found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ReferenceDataDomainDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/reference-data/domains/{domain}": {
      "get": {
        "tags": [
          "Reference Data Domains"
        ],
        "summary": "Get a reference data domain",
        "description": "Returns the reference data domain, including all reference data codes linked to that domain. Requires role `ROLE_PRISON_PERSON_API__REFERENCE_DATA__RO`",
        "operationId": "getReferenceDataDomain",
        "parameters": [
          {
            "name": "domain",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Reference data domain retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReferenceDataDomainDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found, the reference data domain was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/reference-data/domains/{domain}/codes": {
      "get": {
        "tags": [
          "Reference Data Codes"
        ],
        "summary": "Get all reference data codes for {domain}",
        "description": "Returns the list of reference data codes within {domain}. By default this endpoint only returns active reference data codes. The `includeInactive` parameter can be used to return all reference data codes. Requires role `ROLE_PRISON_PERSON_API__REFERENCE_DATA__RO`",
        "operationId": "getReferenceDataCodes",
        "parameters": [
          {
            "name": "domain",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeInactive",
            "in": "query",
            "description": "Include inactive reference data codes. Defaults to false. Requires role `ROLE_PRISON_PERSON_API__REFERENCE_DATA__RO`",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Reference data codes found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ReferenceDataCodeDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found, the reference data domain was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/reference-data/domains/{domain}/codes/{code}": {
      "get": {
        "tags": [
          "Reference Data Codes"
        ],
        "summary": "Get a reference data code",
        "description": "Returns the reference data code.",
        "operationId": "getReferenceDataCode",
        "parameters": [
          {
            "name": "domain",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Reference data code retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReferenceDataCodeDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found, the reference data code was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/queue-admin/get-dlq-messages/{dlqName}": {
      "get": {
        "tags": [
          "hmpps-queue-resource"
        ],
        "operationId": "getDlqMessages",
        "parameters": [
          {
            "name": "dlqName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "maxMessages",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetDlqResult"
                }
              }
            }
          }
        }
      }
    },
    "/prisoners/{prisonerNumber}": {
      "get": {
        "tags": [
          "Prison Person Data"
        ],
        "description": "Requires role `ROLE_PRISON_PERSON_API__PRISON_PERSON_DATA__RO`",
        "operationId": "getPrisonPersonData",
        "parameters": [
          {
            "name": "prisonerNumber",
            "in": "path",
            "description": "The prisoner number",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The prisoner number",
              "example": "A1234AA"
            },
            "example": "A1234AA"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns Prison Person Data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrisonPersonDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Missing required role. Requires ROLE_PRISON_PERSON_API__PRISON_PERSON_DATA__RO",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Data not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisoners/{prisonerNumber}/field-history/{field}": {
      "get": {
        "tags": [
          "Field History"
        ],
        "description": "Requires role `ROLE_PRISON_PERSON_API__FIELD_HISTORY__RO`",
        "operationId": "getFieldHistory",
        "parameters": [
          {
            "name": "prisonerNumber",
            "in": "path",
            "description": "The prisoner number",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The prisoner number",
              "example": "A1234AA"
            },
            "example": "A1234AA"
          },
          {
            "name": "field",
            "in": "path",
            "description": "The field to get history for",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The field to get history for",
              "example": "HAIR"
            },
            "example": "HAIR"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns Field History Data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FieldHistoryDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Missing required role. Requires ROLE_PRISON_PERSON_API__FIELD_HISTORY__RO",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Data not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/photographs/{uuid}/file": {
      "get": {
        "tags": [
          "Prison Person Photographs"
        ],
        "summary": "Get a document file from documents service using document uuid.",
        "description": "Get a document from documents service using document uuid. Requires ROLE_CVL_ADMIN.",
        "operationId": "getDocumentFileByUUI",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "description": "The uuid of the photograph required",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns uploaded photograph",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string",
                  "format": "byte"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Missing required role. Requires ROLE_PRISON_PERSON_API__PRISON_PERSON_DATA__RO",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Data not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/photographs/{prisonerNumber}/all": {
      "get": {
        "tags": [
          "Prison Person Photographs"
        ],
        "summary": "Get all photographs for a prisoner",
        "description": "description = \"Returns document properties and metadata associated with the document. The document file must be \ndownloaded separately using the GET /COMING_SOON.\"\nRequires role `ROLE_PRISON_PERSON_API__PRISON_PERSON_DATA__RO`",
        "operationId": "getAllProfilePicturesForPrisoner",
        "parameters": [
          {
            "name": "prisonerNumber",
            "in": "path",
            "description": "The prisoner number",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "A1234AA"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns Photograph Document Data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DocumentDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Missing required role. Requires ROLE_PRISON_PERSON_API__PRISON_PERSON_DATA__RO",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Data not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/distinguishing-marks/prisoner/{prisonerNumber}": {
      "get": {
        "tags": [
          "Distinguishing marks"
        ],
        "summary": "Get all distinguishing marks for a prisoner",
        "description": "description = \"Returns a list of distinguishing marks for a prisoner.Images associated with the distinguishing marks must be downloaded separatelyRequires role `ROLE_PRISON_PERSON_API__PRISON_PERSON_DATA__RW`",
        "operationId": "getDistinguishingMarksForPrisoner",
        "parameters": [
          {
            "name": "prisonerNumber",
            "in": "path",
            "description": "The prisoner number",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "A1234AA"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns distinguishing marks for the prisoner",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DistinguishingMarkDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Missing required role. Requires ROLE_PRISON_PERSON_API__PRISON_PERSON_DATA__RW",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Data not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ErrorResponse": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "integer",
            "format": "int32"
          },
          "errorCode": {
            "type": "string"
          },
          "userMessage": {
            "type": "string"
          },
          "developerMessage": {
            "type": "string"
          },
          "moreInfo": {
            "type": "string"
          }
        }
      },
      "ProfileDetailsPhysicalAttributesSyncRequest": {
        "required": [
          "appliesFrom"
        ],
        "type": "object",
        "properties": {
          "hair": {
            "$ref": "#/components/schemas/SyncValueWithMetadataString"
          },
          "facialHair": {
            "$ref": "#/components/schemas/SyncValueWithMetadataString"
          },
          "face": {
            "$ref": "#/components/schemas/SyncValueWithMetadataString"
          },
          "build": {
            "$ref": "#/components/schemas/SyncValueWithMetadataString"
          },
          "leftEyeColour": {
            "$ref": "#/components/schemas/SyncValueWithMetadataString"
          },
          "rightEyeColour": {
            "$ref": "#/components/schemas/SyncValueWithMetadataString"
          },
          "shoeSize": {
            "$ref": "#/components/schemas/SyncValueWithMetadataString"
          },
          "appliesFrom": {
            "type": "string",
            "description": "The timestamp indicating from when these profile details physical attributes were true for the prisoner. For edits to the current booking, this should be equal to the 'createdAt' date. For edits to historical bookings, this should be equal to the booking start date.",
            "format": "yyyy-MM-dd'T'HH:mm:ssX",
            "example": "2024-06-14T10:35:17+0100"
          },
          "appliesTo": {
            "type": "string",
            "description": "The timestamp of when these profile details physical attributes should no longer be considered applicable. For edits to the current booking, this should be left null. For edits to historical bookings, this should be equal to the booking end date.",
            "format": "yyyy-MM-dd'T'HH:mm:ssX",
            "example": "2024-06-14T10:35:17+0100"
          },
          "latestBooking": {
            "type": "boolean",
            "description": "An indication of whether the edit was performed to the latest booking. If this is not the latest booking, the edit will be inserted into field history but the physical attributes table will not be updated.",
            "example": true
          }
        },
        "description": "Request object for syncing a prisoner's profile details physical attributes"
      },
      "SyncValueWithMetadataString": {
        "required": [
          "lastModifiedAt",
          "lastModifiedBy"
        ],
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "Value"
          },
          "lastModifiedAt": {
            "type": "string",
            "description": "The timestamp indicating when this record was last edited in NOMIS",
            "format": "yyyy-MM-dd'T'HH:mm:ssX",
            "example": "2024-06-14T10:35:17+0100"
          },
          "lastModifiedBy": {
            "type": "string",
            "description": "The username of who last edited the record in NOMIS",
            "example": "USER1"
          }
        },
        "description": "The sync value with metadata"
      },
      "ProfileDetailsPhysicalAttributesSyncResponse": {
        "required": [
          "fieldHistoryInserted"
        ],
        "type": "object",
        "properties": {
          "fieldHistoryInserted": {
            "type": "array",
            "description": "The IDs of field history inserted during the sync",
            "example": [
              123,
              456
            ],
            "items": {
              "type": "integer",
              "description": "The IDs of field history inserted during the sync",
              "format": "int64"
            }
          }
        },
        "description": "Profile Details Physical Attributes Sync Response"
      },
      "PhysicalAttributesSyncRequest": {
        "required": [
          "appliesFrom",
          "createdAt",
          "createdBy"
        ],
        "type": "object",
        "properties": {
          "height": {
            "type": "integer",
            "description": "Height (in centimetres). May be left null if no data available for height.",
            "format": "int32",
            "nullable": true,
            "example": 180
          },
          "weight": {
            "type": "integer",
            "description": "Weight (in kilograms). May be left null if no data available for weight.",
            "format": "int32",
            "nullable": true,
            "example": 70
          },
          "appliesFrom": {
            "type": "string",
            "description": "The timestamp indicating from when these physical attributes were true for the prisoner. For edits to the current booking, this should be equal to the 'createdAt' date. For edits to historical bookings, this should be equal to the booking start date.",
            "format": "yyyy-MM-dd'T'HH:mm:ssX",
            "example": "2024-06-14T10:35:17+0100"
          },
          "appliesTo": {
            "type": "string",
            "description": "The timestamp of when these physical attributes should no longer be considered applicable. For edits to the current booking, this should be left null. For edits to historical bookings, this should be equal to the booking end date.",
            "format": "yyyy-MM-dd'T'HH:mm:ssX",
            "example": "2024-06-14T10:35:17+0100"
          },
          "createdAt": {
            "type": "string",
            "description": "The timestamp indicating when this record was last edited in NOMIS.",
            "format": "yyyy-MM-dd'T'HH:mm:ssX",
            "example": "2024-06-14T10:35:17+0100"
          },
          "createdBy": {
            "type": "string",
            "description": "The username of who last edited the record in NOMIS",
            "example": "USER1"
          },
          "latestBooking": {
            "type": "boolean",
            "description": "An indication of whether the edit was performed to the latest booking. If this is not the latest booking, the edit will be inserted into field history but the physical attributes table will not be updated.",
            "example": true
          }
        },
        "description": "Request object for syncing a prisoner's physical attributes"
      },
      "PhysicalAttributesSyncResponse": {
        "required": [
          "fieldHistoryInserted"
        ],
        "type": "object",
        "properties": {
          "fieldHistoryInserted": {
            "type": "array",
            "description": "The IDs of field history inserted during the sync",
            "example": [
              123,
              456
            ],
            "items": {
              "type": "integer",
              "description": "The IDs of field history inserted during the sync",
              "format": "int64"
            }
          }
        },
        "description": "Physical Attributes Sync Response"
      },
      "DistinguishingMarkUpdateSyncRequest": {
        "required": [
          "appliesFrom",
          "bodyPart",
          "createdAt",
          "createdBy",
          "markType",
          "uuid"
        ],
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "description": "The UUID of the distinguishing mark to update.",
            "format": "uuid",
            "writeOnly": true,
            "example": "af168736-d276-46a1-8038-e2cb84da4cdf"
          },
          "markType": {
            "type": "string",
            "description": "Type of distinguishing mark. `ReferenceDataCode.id`.",
            "example": "MARK_TYPE_SCAR"
          },
          "bodyPart": {
            "type": "string",
            "description": "Part of body the distinguishing mark is on. `ReferenceDataCode.id`.",
            "example": "BODY_PART_HEAD"
          },
          "imageUpdated": {
            "type": "boolean",
            "description": "Whether or not the image for the distinguishing mark has been updated, to inform us if we should update our stored image.",
            "example": true
          },
          "side": {
            "type": "string",
            "description": "Side of the body part the mark is on. `ReferenceDataCode.id`. May be left null if unentered.",
            "example": "SIDE_R"
          },
          "partOrientation": {
            "type": "string",
            "description": "Orientation of the mark on the body part. `ReferenceDataCode.id`. May be left null if unentered.",
            "example": "PART_ORIENT_CENTR"
          },
          "comment": {
            "type": "string",
            "description": "Comment about the distinguishing mark. May be left null if unentered.",
            "example": "Long healed scar from an old fight"
          },
          "appliesFrom": {
            "type": "string",
            "description": "The timestamp indicating from when this mark was valid for the prisoner. For edits to the current booking, this should be equal to the 'createdAt' date. For edits to historical bookings, this should be equal to the booking start date.",
            "format": "yyyy-MM-dd'T'HH:mm:ssX",
            "example": "2024-06-14T10:35:17+0100"
          },
          "appliesTo": {
            "type": "string",
            "description": "The timestamp of when this mark should no longer be considered applicable. For edits to the current booking, this should be left null. For edits to historical bookings, this should be equal to the booking end date.",
            "format": "yyyy-MM-dd'T'HH:mm:ssX",
            "example": "2024-06-14T10:35:17+0100"
          },
          "createdAt": {
            "type": "string",
            "description": "The timestamp indicating when this record was last edited in NOMIS.",
            "format": "yyyy-MM-dd'T'HH:mm:ssX",
            "example": "2024-06-14T10:35:17+0100"
          },
          "createdBy": {
            "type": "string",
            "description": "The username of who last edited the record in NOMIS",
            "example": "USER1"
          },
          "latestBooking": {
            "type": "boolean",
            "description": "An indication of whether the edit was performed to the latest booking. If this is not the latest booking, the edit will be inserted into field history but the distinguishing marks table will not be updated.",
            "example": true
          }
        },
        "description": "Request object for syncing a prisoner's distinguishing marks"
      },
      "DistinguishingMarkSyncResponse": {
        "required": [
          "uuid"
        ],
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "description": "The UUID of the distinguishing mark updated",
            "format": "uuid",
            "example": "22198ef9-445d-449a-b016-0521ebfb5c2d"
          }
        },
        "description": "Distinguishing Mark Sync Response"
      },
      "DistinguishingMarkImageUpdateSyncRequest": {
        "required": [
          "appliesFrom",
          "createdAt",
          "createdBy",
          "default"
        ],
        "type": "object",
        "properties": {
          "default": {
            "type": "boolean",
            "description": "Whether the default flag is checked in NOMIS"
          },
          "appliesFrom": {
            "type": "string",
            "description": "The timestamp indicating from when this mark was valid for the prisoner. For edits to the current booking, this should be equal to the 'createdAt' date. For edits to historical bookings, this should be equal to the booking start date.",
            "format": "yyyy-MM-dd'T'HH:mm:ssX",
            "example": "2024-06-14T10:35:17+0100"
          },
          "appliesTo": {
            "type": "string",
            "description": "The timestamp of when this mark should no longer be considered applicable. For edits to the current booking, this should be left null. For edits to historical bookings, this should be equal to the booking end date.",
            "format": "yyyy-MM-dd'T'HH:mm:ssX",
            "example": "2024-06-14T10:35:17+0100"
          },
          "createdAt": {
            "type": "string",
            "description": "The timestamp indicating when this record was last edited in NOMIS.",
            "format": "yyyy-MM-dd'T'HH:mm:ssX",
            "example": "2024-06-14T10:35:17+0100"
          },
          "createdBy": {
            "type": "string",
            "description": "The username of who last edited the record in NOMIS",
            "example": "USER1"
          },
          "latestBooking": {
            "type": "boolean",
            "description": "An indication of whether the edit was performed to the latest booking. If this is not the latest booking, the edit will be inserted into field history but the distinguishing marks table will not be updated.",
            "example": true
          }
        },
        "description": "The distinguishing mark image request"
      },
      "DistinguishingMarkImageSyncResponse": {
        "required": [
          "uuid"
        ],
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "description": "The UUID of the distinguishing mark image updated",
            "format": "uuid",
            "example": "22198ef9-445d-449a-b016-0521ebfb5c2d"
          }
        }
      },
      "RetryDlqResult": {
        "required": [
          "messagesFoundCount"
        ],
        "type": "object",
        "properties": {
          "messagesFoundCount": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "PurgeQueueResult": {
        "required": [
          "messagesFoundCount"
        ],
        "type": "object",
        "properties": {
          "messagesFoundCount": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "MigrationValueWithMetadataString": {
        "required": [
          "lastModifiedAt",
          "lastModifiedBy"
        ],
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "Value"
          },
          "lastModifiedAt": {
            "type": "string",
            "description": "The timestamp indicating when this record was last edited in NOMIS",
            "format": "yyyy-MM-dd'T'HH:mm:ssX",
            "example": "2024-06-14T10:35:17+0100"
          },
          "lastModifiedBy": {
            "type": "string",
            "description": "The username of who last edited the record in NOMIS",
            "example": "USER1"
          }
        },
        "description": "The migration value (`ReferenceDataCode.code`) with metadata"
      },
      "ProfileDetailsPhysicalAttributesMigrationRequest": {
        "required": [
          "appliesFrom",
          "latestBooking"
        ],
        "type": "object",
        "properties": {
          "hair": {
            "$ref": "#/components/schemas/MigrationValueWithMetadataString"
          },
          "facialHair": {
            "$ref": "#/components/schemas/MigrationValueWithMetadataString"
          },
          "face": {
            "$ref": "#/components/schemas/MigrationValueWithMetadataString"
          },
          "build": {
            "$ref": "#/components/schemas/MigrationValueWithMetadataString"
          },
          "leftEyeColour": {
            "$ref": "#/components/schemas/MigrationValueWithMetadataString"
          },
          "rightEyeColour": {
            "$ref": "#/components/schemas/MigrationValueWithMetadataString"
          },
          "shoeSize": {
            "$ref": "#/components/schemas/MigrationValueWithMetadataString"
          },
          "appliesFrom": {
            "type": "string",
            "description": "The timestamp indicating from when these physical attributes were true for the prisoner. For migration of the current booking, this should be equal to the 'createdAt' date. For migration of historical bookings, this should be equal to the booking start date.",
            "format": "yyyy-MM-dd'T'HH:mm:ssX",
            "example": "2024-06-14T10:35:17+0100"
          },
          "appliesTo": {
            "type": "string",
            "description": "The timestamp of when these physical attributes should no longer be considered applicable. For migration of the current booking, this should be left null. For migration of historical bookings, this should be equal to the booking end date.",
            "format": "yyyy-MM-dd'T'HH:mm:ssX",
            "example": "2024-06-14T10:35:17+0100"
          },
          "latestBooking": {
            "type": "boolean",
            "description": "A flag to indicate this is the latest booking.",
            "example": true
          }
        },
        "description": "Request object for migration of a prisoner's profile details physical attributes"
      },
      "ProfileDetailsPhysicalAttributesMigrationResponse": {
        "required": [
          "fieldHistoryInserted"
        ],
        "type": "object",
        "properties": {
          "fieldHistoryInserted": {
            "type": "array",
            "description": "The IDs of field history created during the migration",
            "example": [
              123,
              456
            ],
            "items": {
              "type": "integer",
              "description": "The IDs of field history created during the migration",
              "format": "int64"
            }
          }
        },
        "description": "Profile Details Physical Attributes Migration Response"
      },
      "PhysicalAttributesMigrationRequest": {
        "required": [
          "appliesFrom",
          "createdAt",
          "createdBy",
          "latestBooking"
        ],
        "type": "object",
        "properties": {
          "height": {
            "type": "integer",
            "description": "Height (in centimetres). May be left null if no data available for height.",
            "format": "int32",
            "nullable": true,
            "example": 180
          },
          "weight": {
            "type": "integer",
            "description": "Weight (in kilograms). May be left null if no data available for weight.",
            "format": "int32",
            "nullable": true,
            "example": 70
          },
          "appliesFrom": {
            "type": "string",
            "description": "The timestamp indicating from when these physical attributes were true for the prisoner. For migration of the current booking, this should be equal to the 'createdAt' date. For migration of historical bookings, this should be equal to the booking start date.",
            "format": "yyyy-MM-dd'T'HH:mm:ssX",
            "example": "2024-06-14T10:35:17+0100"
          },
          "appliesTo": {
            "type": "string",
            "description": "The timestamp of when these physical attributes should no longer be considered applicable. For migration of the current booking, this should be left null. For migration of historical bookings, this should be equal to the booking end date.",
            "format": "yyyy-MM-dd'T'HH:mm:ssX",
            "example": "2024-06-14T10:35:17+0100"
          },
          "createdAt": {
            "type": "string",
            "description": "The timestamp indicating when this record was last edited in NOMIS.",
            "format": "yyyy-MM-dd'T'HH:mm:ssX",
            "example": "2024-06-14T10:35:17+0100"
          },
          "createdBy": {
            "type": "string",
            "description": "The username of who last edited the record in NOMIS",
            "example": "USER1"
          },
          "latestBooking": {
            "type": "boolean",
            "description": "A flag to indicate this is the latest booking.",
            "example": true
          }
        },
        "description": "Request object for migration of a prisoner's physical attributes"
      },
      "PhysicalAttributesMigrationResponse": {
        "required": [
          "fieldHistoryInserted"
        ],
        "type": "object",
        "properties": {
          "fieldHistoryInserted": {
            "type": "array",
            "description": "The IDs of field history created during the migration",
            "example": [
              123,
              456
            ],
            "items": {
              "type": "integer",
              "description": "The IDs of field history created during the migration",
              "format": "int64"
            }
          }
        },
        "description": "Physical Attributes Migration Response"
      },
      "DistinguishingMarkCreationSyncRequest": {
        "required": [
          "appliesFrom",
          "bodyPart",
          "createdAt",
          "createdBy",
          "markType"
        ],
        "type": "object",
        "properties": {
          "markType": {
            "type": "string",
            "description": "Type of distinguishing mark. `ReferenceDataCode.id`.",
            "example": "MARK_TYPE_SCAR"
          },
          "bodyPart": {
            "type": "string",
            "description": "Part of body the distinguishing mark is on. `ReferenceDataCode.id`.",
            "example": "BODY_PART_HEAD"
          },
          "side": {
            "type": "string",
            "description": "Side of the body part the mark is on. `ReferenceDataCode.id`. May be left null if unentered.",
            "example": "SIDE_R"
          },
          "partOrientation": {
            "type": "string",
            "description": "Orientation of the mark on the body part. `ReferenceDataCode.id`. May be left null if unentered.",
            "example": "PART_ORIENT_CENTR"
          },
          "comment": {
            "type": "string",
            "description": "Comment about the distinguishing mark. May be left null if unentered.",
            "example": "Long healed scar from an old fight"
          },
          "appliesFrom": {
            "type": "string",
            "description": "The timestamp indicating from when this mark was valid for the prisoner. For edits to the current booking, this should be equal to the 'createdAt' date. For edits to historical bookings, this should be equal to the booking start date.",
            "format": "yyyy-MM-dd'T'HH:mm:ssX",
            "example": "2024-06-14T10:35:17+0100"
          },
          "appliesTo": {
            "type": "string",
            "description": "The timestamp of when this mark should no longer be considered applicable. For edits to the current booking, this should be left null. For edits to historical bookings, this should be equal to the booking end date.",
            "format": "yyyy-MM-dd'T'HH:mm:ssX",
            "example": "2024-06-14T10:35:17+0100"
          },
          "createdAt": {
            "type": "string",
            "description": "The timestamp indicating when this record was last edited in NOMIS.",
            "format": "yyyy-MM-dd'T'HH:mm:ssX",
            "example": "2024-06-14T10:35:17+0100"
          },
          "createdBy": {
            "type": "string",
            "description": "The username of who last edited the record in NOMIS",
            "example": "USER1"
          },
          "latestBooking": {
            "type": "boolean",
            "description": "An indication of whether the edit was performed to the latest booking. If this is not the latest booking, the edit will be inserted into field history but the distinguishing marks table will not be updated.",
            "example": true
          }
        },
        "description": "Request object for syncing a prisoner's distinguishing marks"
      },
      "DistinguishingMarkImageCreateSyncRequest": {
        "required": [
          "appliesFrom",
          "createdAt",
          "createdBy",
          "imageSource"
        ],
        "type": "object",
        "properties": {
          "imageSource": {
            "type": "string",
            "description": "Source of the image (e.g. LIVE, WEB)",
            "example": "LIVE"
          },
          "appliesFrom": {
            "type": "string",
            "description": "The timestamp indicating from when this image was valid for the prisoner. For edits to the current booking, this should be equal to the 'createdAt' date. For edits to historical bookings, this should be equal to the booking start date.",
            "format": "yyyy-MM-dd'T'HH:mm:ssX",
            "example": "2024-06-14T10:35:17+0100"
          },
          "appliesTo": {
            "type": "string",
            "description": "The timestamp of when this image should no longer be considered applicable. For edits to the current booking, this should be left null. For edits to historical bookings, this should be equal to the booking end date.",
            "format": "yyyy-MM-dd'T'HH:mm:ssX",
            "example": "2024-06-14T10:35:17+0100"
          },
          "createdAt": {
            "type": "string",
            "description": "The timestamp indicating when this record was last edited in NOMIS.",
            "format": "yyyy-MM-dd'T'HH:mm:ssX",
            "example": "2024-06-14T10:35:17+0100"
          },
          "createdBy": {
            "type": "string",
            "description": "The username of who last edited the record in NOMIS",
            "example": "USER1"
          },
          "latestBooking": {
            "type": "boolean",
            "description": "An indication of whether the edit was performed to the latest booking. If this is not the latest booking, the edit will be inserted into field history but the distinguishing marks table will not be updated.",
            "example": true
          }
        },
        "description": "Request object for creating a an image for a prisoner's distinguishing mark"
      },
      "DocumentDto": {
        "required": [
          "createdByServiceName",
          "createdTime",
          "documentFilename",
          "documentType",
          "documentUuid",
          "fileExtension",
          "fileHash",
          "fileSize",
          "filename",
          "metadata",
          "mimeType"
        ],
        "type": "object",
        "properties": {
          "documentUuid": {
            "type": "string"
          },
          "documentType": {
            "type": "string",
            "enum": [
              "PRISONER_PROFILE_PICTURE",
              "DISTINGUISHING_MARK_IMAGE"
            ]
          },
          "documentFilename": {
            "type": "string"
          },
          "filename": {
            "type": "string"
          },
          "fileExtension": {
            "type": "string"
          },
          "fileSize": {
            "type": "integer",
            "format": "int64"
          },
          "fileHash": {
            "type": "string"
          },
          "mimeType": {
            "type": "string"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "createdTime": {
            "type": "string"
          },
          "createdByServiceName": {
            "type": "string"
          },
          "createdByUsername": {
            "type": "string"
          }
        }
      },
      "DistinguishingMarkRequest": {
        "required": [
          "bodyPart",
          "markType",
          "prisonerNumber"
        ],
        "type": "object",
        "properties": {
          "prisonerNumber": {
            "type": "string",
            "description": "The prisoner number of the prisoner this distinguishing mark is associated with.",
            "example": "A1234AA"
          },
          "markType": {
            "type": "string",
            "description": "Type of distinguishing mark. `ReferenceDataCode.id`.",
            "example": "MARK_TYPE_SCAR"
          },
          "bodyPart": {
            "type": "string",
            "description": "Part of body the distinguishing mark is on. `ReferenceDataCode.id`.",
            "example": "BODY_PART_HEAD"
          },
          "side": {
            "type": "string",
            "description": "Side of the body part the mark is on. `ReferenceDataCode.id`.",
            "example": "SIDE_R"
          },
          "partOrientation": {
            "type": "string",
            "description": "Orientation of the mark on the body part. `ReferenceDataCode.id`.",
            "example": "PART_ORIENT_CENTR"
          },
          "comment": {
            "type": "string",
            "description": "Comment about the distinguishing mark.",
            "example": "Long healed scar from an old fight"
          }
        },
        "description": "Request object for creating an distinguishing mark for a prisoner."
      },
      "DistinguishingMarkDto": {
        "required": [
          "bodyPart",
          "createdAt",
          "createdBy",
          "id",
          "markType",
          "photographUuids",
          "prisonerNumber"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the distinguishing mark"
          },
          "prisonerNumber": {
            "type": "string",
            "description": "The prisoner number of the prisoner this distinguishing mark is associated with",
            "example": "A1234AA"
          },
          "bodyPart": {
            "$ref": "#/components/schemas/ReferenceDataSimpleDto"
          },
          "markType": {
            "$ref": "#/components/schemas/ReferenceDataSimpleDto"
          },
          "side": {
            "$ref": "#/components/schemas/ReferenceDataSimpleDto"
          },
          "partOrientation": {
            "$ref": "#/components/schemas/ReferenceDataSimpleDto"
          },
          "comment": {
            "type": "string",
            "description": "Comment about the distinguishing mark"
          },
          "photographUuids": {
            "type": "array",
            "description": "List of photograph UUIDs associated with this distinguishing mark",
            "items": {
              "$ref": "#/components/schemas/DistinguishingMarkImageDto"
            }
          },
          "createdAt": {
            "type": "string",
            "description": "The date and time the data was last modified",
            "format": "yyyy-MM-dd'T'HH:mm:ssX",
            "example": "2024-06-14T10:35:17+0100"
          },
          "createdBy": {
            "type": "string",
            "description": "Username of the user that last modified this field",
            "example": "USER1"
          }
        },
        "description": "Distinguishing mark"
      },
      "DistinguishingMarkImageDto": {
        "required": [
          "id",
          "latest"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The uuid of the distinguishing mark"
          },
          "latest": {
            "type": "boolean",
            "description": "Whether the distinguishing mark is the latest one or not"
          }
        },
        "description": "Distinguishing mark image"
      },
      "ReferenceDataSimpleDto": {
        "required": [
          "description",
          "id",
          "isActive",
          "listSequence"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id",
            "example": "FACIAL_HAIR_BEARDED"
          },
          "description": {
            "type": "string",
            "description": "Description of the reference data code",
            "example": "Full Beard"
          },
          "listSequence": {
            "type": "integer",
            "description": "The sequence number of the reference data code. Used for ordering reference data correctly in lists and dropdowns. 0 is default order by description.",
            "format": "int32",
            "example": 3
          },
          "isActive": {
            "type": "boolean",
            "description": "Indicates that the reference data code is active and can be used. Inactive reference data codes are not returned by default in the API",
            "example": true
          }
        },
        "description": "Reference Data Simple DTO - for use in dropdowns"
      },
      "PhysicalAttributesUpdateRequest": {
        "type": "object",
        "properties": {
          "height": {
            "type": "integer",
            "description": "Height (in centimetres).",
            "format": "int32",
            "nullable": true,
            "example": 180
          },
          "weight": {
            "type": "integer",
            "description": "Weight (in kilograms).",
            "format": "int32",
            "nullable": true,
            "example": 70
          },
          "hair": {
            "type": "string",
            "description": "Hair type or colour. `ReferenceDataCode.id`.",
            "nullable": true,
            "example": "HAIR_BROWN"
          },
          "facialHair": {
            "type": "string",
            "description": "Facial hair type. `ReferenceDataCode.id`.",
            "nullable": true,
            "example": "FACIAL_HAIR_BEARDED"
          },
          "face": {
            "type": "string",
            "description": "Face shape. `ReferenceDataCode.id`.",
            "nullable": true,
            "example": "FACE_OVAL"
          },
          "build": {
            "type": "string",
            "description": "Build. `ReferenceDataCode.id`.",
            "nullable": true,
            "example": "BUILD_MEDIUM"
          },
          "leftEyeColour": {
            "type": "string",
            "description": "Left eye colour. `ReferenceDataCode.id`.",
            "nullable": true,
            "example": "EYE_GREEN"
          },
          "rightEyeColour": {
            "type": "string",
            "description": "Right eye colour. `ReferenceDataCode.id`.",
            "nullable": true,
            "example": "EYE_BLUE"
          },
          "shoeSize": {
            "type": "string",
            "description": "Shoe size (in UK half sizes).",
            "nullable": true,
            "example": "9.5"
          }
        },
        "description": "Request object for updating a prisoner's physical attributes. Can include one or multiple attributes. If an attribute is not provided, it will not be updated.  If an attribute is provided and set to 'null' it will be updated to equal 'null'."
      },
      "PhysicalAttributesDto": {
        "type": "object",
        "properties": {
          "height": {
            "$ref": "#/components/schemas/ValueWithMetadataInteger"
          },
          "weight": {
            "$ref": "#/components/schemas/ValueWithMetadataInteger"
          },
          "hair": {
            "$ref": "#/components/schemas/ValueWithMetadataReferenceDataSimpleDto"
          },
          "facialHair": {
            "$ref": "#/components/schemas/ValueWithMetadataReferenceDataSimpleDto"
          },
          "face": {
            "$ref": "#/components/schemas/ValueWithMetadataReferenceDataSimpleDto"
          },
          "build": {
            "$ref": "#/components/schemas/ValueWithMetadataReferenceDataSimpleDto"
          },
          "leftEyeColour": {
            "$ref": "#/components/schemas/ValueWithMetadataReferenceDataSimpleDto"
          },
          "rightEyeColour": {
            "$ref": "#/components/schemas/ValueWithMetadataReferenceDataSimpleDto"
          },
          "shoeSize": {
            "$ref": "#/components/schemas/ValueWithMetadataString"
          }
        },
        "description": "Physical Attributes"
      },
      "ValueWithMetadataInteger": {
        "required": [
          "lastModifiedAt",
          "lastModifiedBy"
        ],
        "type": "object",
        "properties": {
          "value": {
            "type": "integer",
            "description": "Value",
            "format": "int32"
          },
          "lastModifiedAt": {
            "type": "string",
            "description": "Timestamp this field was last modified",
            "format": "yyyy-MM-dd'T'HH:mm:ssX",
            "example": "2024-06-14T10:35:17+0100"
          },
          "lastModifiedBy": {
            "type": "string",
            "description": "Username of the user that last modified this field",
            "example": "USER1"
          }
        },
        "description": "Weight (in kilograms)"
      },
      "ValueWithMetadataReferenceDataSimpleDto": {
        "required": [
          "lastModifiedAt",
          "lastModifiedBy"
        ],
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/ReferenceDataSimpleDto"
          },
          "lastModifiedAt": {
            "type": "string",
            "description": "Timestamp this field was last modified",
            "format": "yyyy-MM-dd'T'HH:mm:ssX",
            "example": "2024-06-14T10:35:17+0100"
          },
          "lastModifiedBy": {
            "type": "string",
            "description": "Username of the user that last modified this field",
            "example": "USER1"
          }
        },
        "description": "Right eye colour"
      },
      "ValueWithMetadataString": {
        "required": [
          "lastModifiedAt",
          "lastModifiedBy"
        ],
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "Value"
          },
          "lastModifiedAt": {
            "type": "string",
            "description": "Timestamp this field was last modified",
            "format": "yyyy-MM-dd'T'HH:mm:ssX",
            "example": "2024-06-14T10:35:17+0100"
          },
          "lastModifiedBy": {
            "type": "string",
            "description": "Username of the user that last modified this field",
            "example": "USER1"
          }
        },
        "description": "Shoe size"
      },
      "Defined": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/NullishListString"
          },
          {
            "type": "object",
            "properties": {
              "value": {
                "type": "object"
              }
            }
          },
          {
            "$ref": "#/components/schemas/NullishString"
          }
        ]
      },
      "NullishListString": {
        "type": "object",
        "description": "The medical dietary requirements the prisoner has. A list of `ReferenceDataCode`.`id`",
        "example": "[MEDICAL_DIET_LOW_FAT, FREE_FROM_EGG]"
      },
      "PrisonerHealthUpdateRequest": {
        "type": "object",
        "properties": {
          "smokerOrVaper": {
            "type": "string",
            "description": "Smoker or vaper. `ReferenceDataCode`.`id`.",
            "nullable": true,
            "example": "SMOKE_NO"
          },
          "foodAllergies": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/Defined"
              },
              {
                "$ref": "#/components/schemas/Undefined"
              }
            ]
          },
          "medicalDietaryRequirements": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/Defined"
              },
              {
                "$ref": "#/components/schemas/Undefined"
              }
            ]
          }
        },
        "description": "Request object for updating a prisoner's health information. Can include one or multiple fields. If an attribute is provided and set to 'null' it will be updated equal to 'null'. If it is not provided it is not updated"
      },
      "Undefined": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/NullishListString"
          },
          {
            "$ref": "#/components/schemas/NullishString"
          }
        ]
      },
      "HealthDto": {
        "type": "object",
        "properties": {
          "smokerOrVaper": {
            "$ref": "#/components/schemas/ValueWithMetadataReferenceDataSimpleDto"
          },
          "foodAllergies": {
            "$ref": "#/components/schemas/ValueWithMetadataListReferenceDataSimpleDto"
          },
          "medicalDietaryRequirements": {
            "$ref": "#/components/schemas/ValueWithMetadataListReferenceDataSimpleDto"
          }
        },
        "description": "Prison person health"
      },
      "ValueWithMetadataListReferenceDataSimpleDto": {
        "required": [
          "lastModifiedAt",
          "lastModifiedBy"
        ],
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "description": "Value",
            "items": {
              "$ref": "#/components/schemas/ReferenceDataSimpleDto"
            }
          },
          "lastModifiedAt": {
            "type": "string",
            "description": "Timestamp this field was last modified",
            "format": "yyyy-MM-dd'T'HH:mm:ssX",
            "example": "2024-06-14T10:35:17+0100"
          },
          "lastModifiedBy": {
            "type": "string",
            "description": "Username of the user that last modified this field",
            "example": "USER1"
          }
        },
        "description": "Medical dietary requirements"
      },
      "DistinguishingMarkUpdateRequest": {
        "required": [
          "bodyPart",
          "comment",
          "markType",
          "partOrientation",
          "side"
        ],
        "type": "object",
        "properties": {
          "markType": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/Defined"
              },
              {
                "$ref": "#/components/schemas/Undefined"
              }
            ]
          },
          "bodyPart": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/Defined"
              },
              {
                "$ref": "#/components/schemas/Undefined"
              }
            ]
          },
          "side": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/Defined"
              },
              {
                "$ref": "#/components/schemas/Undefined"
              }
            ]
          },
          "partOrientation": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/Defined"
              },
              {
                "$ref": "#/components/schemas/Undefined"
              }
            ]
          },
          "comment": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/Defined"
              },
              {
                "$ref": "#/components/schemas/Undefined"
              }
            ]
          }
        },
        "description": "Request object for updating a prisoner's distinguishing mark. Can include one or multiple fields. If an attribute is provided and set to 'null' it will be updated equal to 'null'. If it is not provided it is not updated"
      },
      "NullishString": {
        "type": "object",
        "description": "Comment about the distinguishing mark.",
        "example": "Long healed scar from an old fight"
      },
      "PhysicalAttributesSyncDto": {
        "type": "object",
        "properties": {
          "height": {
            "type": "integer",
            "description": "Height (in centimetres)",
            "format": "int32"
          },
          "weight": {
            "type": "integer",
            "description": "Weight (in kilograms)",
            "format": "int32"
          },
          "hair": {
            "type": "string",
            "description": "Hair type or colour"
          },
          "facialHair": {
            "type": "string",
            "description": "Facial hair type"
          },
          "face": {
            "type": "string",
            "description": "Face shape"
          },
          "build": {
            "type": "string",
            "description": "Build"
          },
          "leftEyeColour": {
            "type": "string",
            "description": "Left eye colour"
          },
          "rightEyeColour": {
            "type": "string",
            "description": "Right eye colour"
          },
          "shoeSize": {
            "type": "string",
            "description": "Shoe size"
          }
        },
        "description": "Physical Attributes"
      },
      "ReferenceDataCodeDto": {
        "required": [
          "code",
          "createdAt",
          "createdBy",
          "description",
          "domain",
          "id",
          "isActive",
          "listSequence"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id",
            "example": "FACIAL_HAIR_BEARDED"
          },
          "domain": {
            "type": "string",
            "description": "Short code for the reference data code",
            "example": "FACIAL_HAIR"
          },
          "code": {
            "type": "string",
            "description": "Short code for reference data code",
            "example": "BEARDED"
          },
          "description": {
            "type": "string",
            "description": "Description of the reference data code",
            "example": "Full Beard"
          },
          "listSequence": {
            "type": "integer",
            "description": "The sequence number of the reference data code. Used for ordering reference data correctly in lists and dropdowns. 0 is default order by description.",
            "format": "int32",
            "example": 3
          },
          "isActive": {
            "type": "boolean",
            "description": "Indicates that the reference data code is active and can be used. Inactive reference data codes are not returned by default in the API",
            "example": true
          },
          "createdAt": {
            "type": "string",
            "description": "The date and time the reference data code was created",
            "format": "yyyy-MM-dd'T'HH:mm:ssX",
            "example": "2024-06-14T10:35:17+0100"
          },
          "createdBy": {
            "type": "string",
            "description": "The username of the user who created the reference data code",
            "example": "USER1234"
          },
          "lastModifiedAt": {
            "type": "string",
            "description": "The date and time the reference data code was last modified",
            "format": "yyyy-MM-dd'T'HH:mm:ssX",
            "example": "2024-06-14T10:35:17+0100"
          },
          "lastModifiedBy": {
            "type": "string",
            "description": "The username of the user who last modified the reference data code",
            "example": "USER1234"
          },
          "deactivatedAt": {
            "type": "string",
            "description": "The date and time the reference data code was deactivated",
            "format": "yyyy-MM-dd'T'HH:mm:ssX",
            "example": "2024-06-14T10:35:17+0100"
          },
          "deactivatedBy": {
            "type": "string",
            "description": "The username of the user who deactivated the reference data code",
            "example": "USER1234"
          }
        },
        "description": "Reference Data Code"
      },
      "ReferenceDataDomainDto": {
        "required": [
          "code",
          "createdAt",
          "createdBy",
          "description",
          "isActive",
          "listSequence",
          "referenceDataCodes",
          "subDomains"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Short code for the reference data domain",
            "example": "HAIR"
          },
          "description": {
            "type": "string",
            "description": "Description of the reference data domain",
            "example": "Hair type or colour"
          },
          "listSequence": {
            "type": "integer",
            "description": "The sequence number of the reference data domain. Used for ordering domains correctly in lists. 0 is default order by description.",
            "format": "int32",
            "example": 3
          },
          "isActive": {
            "type": "boolean",
            "description": "Indicates that the reference data domain is active and can be used. Inactive reference data domains are not returned by default in the API",
            "example": true
          },
          "createdAt": {
            "type": "string",
            "description": "The date and time the reference data domain was created",
            "format": "yyyy-MM-dd'T'HH:mm:ssX",
            "example": "2024-06-14T10:35:17+0100"
          },
          "createdBy": {
            "type": "string",
            "description": "The username of the user who created the reference data domain",
            "example": "USER1234"
          },
          "lastModifiedAt": {
            "type": "string",
            "description": "The date and time the reference data domain was last modified",
            "format": "yyyy-MM-dd'T'HH:mm:ssX",
            "example": "2024-06-14T10:35:17+0100"
          },
          "lastModifiedBy": {
            "type": "string",
            "description": "The username of the user who last modified the reference data domain",
            "example": "USER1234"
          },
          "deactivatedAt": {
            "type": "string",
            "description": "The date and time the reference data domain was deactivated",
            "format": "yyyy-MM-dd'T'HH:mm:ssX",
            "example": "2024-06-14T10:35:17+0100"
          },
          "deactivatedBy": {
            "type": "string",
            "description": "The username of the user who deactivated the reference data domain",
            "example": "USER1234"
          },
          "referenceDataCodes": {
            "type": "array",
            "description": "The reference data codes associated with this reference data domain",
            "items": {
              "$ref": "#/components/schemas/ReferenceDataCodeDto"
            }
          },
          "subDomains": {
            "type": "array",
            "description": "Reference data domains that are considered sub-domains of this domain",
            "items": {
              "$ref": "#/components/schemas/ReferenceDataDomainDto"
            }
          }
        },
        "description": "Reference Data Domain"
      },
      "DlqMessage": {
        "required": [
          "body",
          "messageId"
        ],
        "type": "object",
        "properties": {
          "body": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "messageId": {
            "type": "string"
          }
        }
      },
      "GetDlqResult": {
        "required": [
          "messages",
          "messagesFoundCount",
          "messagesReturnedCount"
        ],
        "type": "object",
        "properties": {
          "messagesFoundCount": {
            "type": "integer",
            "format": "int32"
          },
          "messagesReturnedCount": {
            "type": "integer",
            "format": "int32"
          },
          "messages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DlqMessage"
            }
          }
        }
      },
      "PrisonPersonDto": {
        "required": [
          "health",
          "physicalAttributes",
          "prisonerNumber"
        ],
        "type": "object",
        "properties": {
          "prisonerNumber": {
            "type": "string",
            "description": "Prisoner Number",
            "example": "A1234AA"
          },
          "physicalAttributes": {
            "$ref": "#/components/schemas/PhysicalAttributesDto"
          },
          "health": {
            "$ref": "#/components/schemas/HealthDto"
          }
        },
        "description": "Prison Person"
      },
      "FieldHistoryDto": {
        "required": [
          "anomalous",
          "appliesFrom",
          "createdAt",
          "createdBy",
          "field",
          "prisonerNumber"
        ],
        "type": "object",
        "properties": {
          "prisonerNumber": {
            "type": "string",
            "description": "Prisoner Number",
            "example": "A1234AA"
          },
          "field": {
            "type": "string",
            "description": "Field name",
            "example": "HEIGHT",
            "enum": [
              "HEIGHT",
              "WEIGHT",
              "HAIR",
              "FACIAL_HAIR",
              "FACE",
              "BUILD",
              "LEFT_EYE_COLOUR",
              "RIGHT_EYE_COLOUR",
              "SHOE_SIZE",
              "SMOKER_OR_VAPER",
              "FOOD_ALLERGY",
              "MEDICAL_DIET"
            ]
          },
          "valueInt": {
            "type": "integer",
            "description": "Integer value of the field in the date range `appliesFrom` to `appliesTo`",
            "format": "int32",
            "example": 1
          },
          "valueString": {
            "type": "string",
            "description": "String value of the field in the date range `appliesFrom` to `appliesTo`",
            "example": "string"
          },
          "valueRef": {
            "$ref": "#/components/schemas/ReferenceDataSimpleDto"
          },
          "appliesFrom": {
            "type": "string",
            "description": "The timestamp the field value applies from",
            "format": "yyyy-MM-dd'T'HH:mm:ssX",
            "example": "2024-06-14T10:35:17+0100"
          },
          "appliesTo": {
            "type": "string",
            "description": "The timestamp the field value applies up to. If null, the value currently applies.",
            "format": "yyyy-MM-dd'T'HH:mm:ssX",
            "example": "2024-06-14T10:35:17+0100"
          },
          "createdAt": {
            "type": "string",
            "description": "The date and time the field history entry was created",
            "format": "yyyy-MM-dd'T'HH:mm:ssX",
            "example": "2024-06-14T10:35:17+0100"
          },
          "createdBy": {
            "type": "string",
            "description": "The username of the user who created the field history entry"
          },
          "migratedAt": {
            "type": "string",
            "description": "The date and time the field history entry was migrated",
            "format": "yyyy-MM-dd'T'HH:mm:ssX",
            "example": "2024-06-14T10:35:17+0100"
          },
          "mergedAt": {
            "type": "string",
            "description": "The date and time the field history entry was merged",
            "format": "yyyy-MM-dd'T'HH:mm:ssX",
            "example": "2024-06-14T10:35:17+0100"
          },
          "mergedFrom": {
            "type": "string",
            "description": "The Prisoner Number the field history entry was merged from"
          },
          "source": {
            "type": "string",
            "description": "The source of the change, either DPS or NOMIS. Will be NOMIS if the record was either migrated or synced from NOMIS"
          },
          "anomalous": {
            "type": "boolean",
            "description": "A flag to indicate that when the data was migrated from NOMIS, the booking it was taken from was historical and the booking start and/or end dates did not align sequentially into the timeline of other bookings for the same prisoner"
          }
        },
        "description": "Field History"
      }
    },
    "securitySchemes": {
      "bearer-jwt": {
        "type": "http",
        "name": "Authorization",
        "in": "header",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "hmpps-auth": {
        "type": "oauth2",
        "flows": {
          "clientCredentials": {
            "tokenUrl": "https://sign-in-dev.hmpps.service.justice.gov.uk/auth/oauth/token",
            "scopes": {
              "read": "Allows read of data",
              "write": "Allows write of data"
            }
          },
          "authorizationCode": {
            "authorizationUrl": "https://sign-in-dev.hmpps.service.justice.gov.uk/auth/oauth/authorize",
            "tokenUrl": "https://sign-in-dev.hmpps.service.justice.gov.uk/auth/oauth/token",
            "scopes": {
              "read": "Allows read of data",
              "write": "Allows write of data"
            }
          }
        },
        "openIdConnectUrl": "https://sign-in-dev.hmpps.service.justice.gov.uk/auth/.well-known/openid-configuration"
      }
    }
  }
}
